#!/usr/bin/env python
"""
Title:    Change MAC Address
Author:   Aniket Ambore
Date:     September 10, 2021
Comment:  Change MAC Address - Increase anonymity, Impersonate other devices, Bypass filters !

subprocess Docs => https://docs.python.org/3/library/subprocess.html
optparse Docs => https://docs.python.org/3/library/optparse.html
"""

import subprocess
import argparse
import re
import sys
import time


class MacChanger:
    FAIL = '\033[91m'
    OKGREEN = '\033[92m'
    OKCYAN = '\033[96m'
    ORANGE = '\033[93m'
    BOLD = '\033[1m'

    def get_arguments(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("-i", "--interface", dest="interface", help="Interface to change its MAC address")
        parser.add_argument("-m", "--mac", dest="new_mac", help="New MAC address")
        options = parser.parse_args()
        if not options.interface:
            parser.error(self.FAIL + self.BOLD + "[-] Please specify an interface, use --help for more info.")
        elif not options.new_mac:
            parser.error(self.FAIL + self.BOLD + "[-] Please specify a new mac, use --help for more info.")
        return options

    def change_mac(self, interface, new_mac):
        subprocess.call(["sudo", "ifconfig", interface, "down"])
        subprocess.call(["sudo", "ifconfig", interface, "hw", "ether", new_mac])
        subprocess.call(["sudo", "ifconfig", interface, "up"])
        print(self.OKGREEN + "[+]" + self.OKCYAN + " Changing MAC address of " + self.ORANGE + interface + " to " + self.ORANGE + new_mac)

    def get_current_mac(self, interface):
        ifconfig_result = subprocess.check_output(["sudo", "ifconfig", interface])
        mac_address_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", str(ifconfig_result))
        if mac_address_result:
            return mac_address_result.group(0)
        else:
            print(self.FAIL + "[-] Could not read MAC address")

    def slowprint(self, s):
        for c in s + '\n':
            sys.stdout.write(c)
            sys.stdout.flush()
            time.sleep(0. / 100)

    def script_header(self):
        self.slowprint('''\033[1;31m \033[95m
    ╔═╗┬ ┬┌─┐┌┐┌┌─┐┌─┐  ╔╦╗╔═╗╔═╗  ╔═╗┌┬┐┌┬┐┬─┐┌─┐┌─┐┌─┐
    ║  ├─┤├─┤││││ ┬├┤   ║║║╠═╣║    ╠═╣ ││ ││├┬┘├┤ └─┐└─┐
    ╚═╝┴ ┴┴ ┴┘└┘└─┘└─┘  ╩ ╩╩ ╩╚═╝  ╩ ╩─┴┘─┴┘┴└─└─┘└─┘└─┘\033[92m
        ''')
