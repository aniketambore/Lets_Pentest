#!/usr/bin/env python
"""
Title:    Network Scanner
Author:   Aniket Ambore
Date:     June 24, 2021
Comment:  Network Scanner - Discover all devices on the network.

scapy Docs => https://scapy.readthedocs.io/en/latest/introduction.html
Through scapy module we can create different network tools like ARP Spoofer, Network Scanner, packet dumpers etc. This module can be used to create more advanced tools related to network security and ethical hacking.

argparse Docs => https://docs.python.org/3/library/argparse.html#module-argparse
"""

import scapy.all as scapy
import argparse
import sys
import time
import requests

FAIL = '\033[91m'
OKGREEN = '\033[92m'
OKCYAN = '\033[96m'
ORANGE = '\033[93m'

def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", help="Target IP / IP range.")
    options = parser.parse_args()
    if not options.target:
        parser.error(FAIL + "[-] Please specify a target IP, use --help for more info")
    return options


def get_mac_vendor(mac_address):
    # We will use an API to get the vendor details
    url = "https://api.macvendors.com/"
    # Use get method to fetch details
    response = requests.get(url + mac_address)
    if response.status_code != 200:
        return FAIL + "Invalid"
    return response.content.decode()


def scan(ip) :
    arp_request = scapy.ARP(pdst=ip)
    # arp_request.show()
    # print(arp_request.summary())
    # scapy.ls(arp_request)

    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    # broadcast.show()
    # print(broadcast.summary())
    # scapy.ls(broadcast)

    arp_request_broadcast = broadcast/arp_request
    # arp_request_broadcast.show()
    # print(arp_request_broadcast.summary())

    # answered_list, unanswered_list = scapy.srp(arp_request_broadcast, timeout=1)
    # print(answered_list.summary())

    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    # print(answered_list.summary())

    clients_list = []
    for element in answered_list :
        # print(element[1].show())
        vendor_name = get_mac_vendor(element[1].hwsrc)
        clients_list.append({"ip": element[1].psrc, "mac": element[1].hwsrc, "vendor": vendor_name})
        # print(element[1].psrc + "\t\t" + element[1].hwsrc)
    return clients_list

def print_result(results_list):
    print(OKGREEN + "IP\t\t\t" + OKCYAN + "MAC Address\t\t\t" + PURPLE + "vendor")
    print(ORANGE + "--------------------------------------------------------------------")
    for client in results_list:
        print(OKGREEN + client["ip"] + "\t\t" + OKCYAN + client["mac"] + "\t\t" + PURPLE + client["vendor"])

def slowprint(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0. / 100)

def script_header():
    slowprint('''\033[1;31m \033[93m
╔╗╔┌─┐┌┬┐┬ ┬┌─┐┬─┐┬┌─  ╔═╗┌─┐┌─┐┌┐┌┌┐┌┌─┐┬─┐
║║║├┤  │ ││││ │├┬┘├┴┐  ╚═╗│  ├─┤││││││├┤ ├┬┘
╝╚╝└─┘ ┴ └┴┘└─┘┴└─┴ ┴  ╚═╝└─┘┴ ┴┘└┘┘└┘└─┘┴└─
    ''')

options = get_arguments()
script_header()

scan_result = scan(options.target)
print_result(scan_result)
